tdr<-tp/t.total
fpr<-e.extra/N
acc<-(tp+tn)/(e.total+N)
#######################################
return(list(TPR = tpr,
TDR = tdr,
FPR = fpr,
ACC = acc,
a.total = a.total,
a.missing = a.missing,
a.extra = a.extra,
SHD = shd))
}
debugSource("~/pcgaussiantesting/CG-Testing/pc_gaussian_learning.R")
View(tg.pat)
colnames(tg.pat)
tg.pat[1:50,1:50]
vset <- rownames(cgpat)
vset
#############################################################################################################
#############################################################################################################
#############################################################################################################
`comp.cgs1`<-function(truecg,lcg){
vset <- rownames(truecg)
########Skeleton comparison#############
`skelet` <- function(amat)
{
0 + (amat + t(amat) > 0)
}
print("LCG BEFORE")
print(lcg)
lcg <- lcg[vset, vset]
print("LCG")
print(lcg)
skel<-skelet(lcg)
trueskel<-skelet(truecg)
print("SKEL")
print(skel)
print("TRUESKEL")
print(trueskel)
a <-  trueskel- skel#[vset, vset]
e.missing <- length(which(a == 1))/2
e.extra <- length(which(a == -1))/2
e.total = length(which(trueskel == 1))/2
t.total<-length(which(skel == 1))/2
#######Pattern comparison##############
truepat<-pattern(truecg)
pat<-pattern(lcg)
truearr <- which(truepat - t(truepat) == 1)
pat <- pat[vset, vset]
arr <- which(pat - t(pat) == 1)
a.missing <- length(truearr)-length(which(match(truearr, arr)>0))
a.extra <- length(arr)-length(which(match(arr, truearr)>0))
a.total = length(truearr)
#########Structural Hamming distance#################
lcg <- lcg[vset, vset]
idx <- which(skeleton(truecg) - skeleton(lcg) != 0)
lcg[idx] <- skeleton(truecg)[idx]
shd <- length(idx) / 2
c <- abs(truecg-lcg)
shd <- shd + length(which(c+t(c) != 0)) / 2
###########Error measures###############
tp<-t.total-e.extra
N=choose(length(vset),2)-e.total
tn<-N-e.extra
tpr<-tp/e.total
tdr<-tp/t.total
fpr<-e.extra/N
acc<-(tp+tn)/(e.total+N)
#######################################
return(list(TPR = tpr,
TDR = tdr,
FPR = fpr,
ACC = acc,
a.total = a.total,
a.missing = a.missing,
a.extra = a.extra,
SHD = shd))
}
debugSource("~/pcgaussiantesting/CG-Testing/pc_gaussian_learning.R")
#############################################################################################################
#############################################################################################################
#############################################################################################################
`comp.cgs1`<-function(truecg,lcg){
vset <- rownames(truecg)
########Skeleton comparison#############
`skelet` <- function(amat)
{
0 + (amat + t(amat) > 0)
}
print("LCG BEFORE")
print(lcg)
lcg <- lcg[vset, vset]
print("LCG")
print(lcg)
skel<-skelet(lcg)
trueskel<-skelet(truecg)
print("SKEL")
print(skel)
print("TRUESKEL")
print(trueskel)
a <-  trueskel- skel#[vset, vset]
e.missing <- length(which(a == 1))/2
e.extra <- length(which(a == -1))/2
e.total = length(which(trueskel == 1))/2
t.total<-length(which(skel == 1))/2
#######Pattern comparison##############
truepat<-pattern(truecg)
pat<-pattern(lcg)
truearr <- which(truepat - t(truepat) == 1)
pat <- pat[vset, vset]
arr <- which(pat - t(pat) == 1)
a.missing <- length(truearr)-length(which(match(truearr, arr)>0))
a.extra <- length(arr)-length(which(match(arr, truearr)>0))
a.total = length(truearr)
#########Structural Hamming distance#################
lcg <- lcg[vset, vset]
idx <- which(skeleton(truecg) - skeleton(lcg) != 0)
lcg[idx] <- skeleton(truecg)[idx]
shd <- length(idx) / 2
c <- abs(truecg-lcg)
shd <- shd + length(which(c+t(c) != 0)) / 2
###########Error measures###############
tp<-t.total-e.extra
N=choose(length(vset),2)-e.total
tn<-N-e.extra
tpr<-tp/e.total
tdr<-tp/t.total
fpr<-e.extra/N
acc<-(tp+tn)/(e.total+N)
#######################################
return(list(TPR = tpr,
TDR = tdr,
FPR = fpr,
ACC = acc,
a.total = a.total,
a.missing = a.missing,
a.extra = a.extra,
SHD = shd))
}
debugSource("~/pcgaussiantesting/CG-Testing/pc_gaussian_learning.R")
library(cglearn)
set.seed(100)
p.value <- .5
n <- 4000
is.chaingraph(toy.graph)
toy.graph <- toy.graph
tgdata <- rnorm.cg(n, toy.graph, get.normal.dist(toy.graph))
tgug <- naive.getug.norm(tgdata, p.value)
tg.jtree <- ug.to.jtree(tgug)
tg.pat <- learn.mec.norm(tg.jtree, cov(tgdata), n, p.value, "CG")
comp.skel(skeleton(toy.graph), skeleton(tg.pat))
# check comp.pat and compare the formulas for SHD
scores <- comp.cgs1(pattern(toy.graph), tg.pat)
# shd is correct here. use this code that is more reliable to compute needed metrics. This only has TP and SHD
comp.pat(pattern(toy.graph), tg.pat)
rLearnedScores <- data.frame(
name = character(),
pval = numeric(),
samplesize = integer(),
degree = integer(),
TPR = numeric(),
TDR = numeric(),
FPR = numeric(),
ACC = numeric(),
SHD = numeric()
)
print(scores)
curcgscores <- c('current', .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
rLearnedScores[nrow(rLearnedScores) + 1,] = c("current", .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
rLearnedScores[nrow(rLearnedScores) + 1,] = c("current", .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
print(rLearnedScores)
print(colnames(tgdata))
print(rownames(tgdata))
#############################################################################################################
#############################################################################################################
#############################################################################################################
`comp.cgs1`<-function(truecg,lcg){
vset <- rownames(truecg)
########Skeleton comparison#############
`skelet` <- function(amat)
{
0 + (amat + t(amat) > 0)
}
# print("LCG BEFORE")
# print(lcg)
# lcg <- lcg[vset, vset]
print("LCG")
print(lcg)
skel<-skelet(lcg)
trueskel<-skelet(truecg)
print("SKEL")
print(skel)
print("TRUESKEL")
print(trueskel)
print("SKEL[VSET,VSET]")
print(skel[vset, vset])
a <-  trueskel- skel[vset, vset]
e.missing <- length(which(a == 1))/2
e.extra <- length(which(a == -1))/2
e.total = length(which(trueskel == 1))/2
t.total<-length(which(skel == 1))/2
#######Pattern comparison##############
truepat<-pattern(truecg)
pat<-pattern(lcg)
truearr <- which(truepat - t(truepat) == 1)
pat <- pat[vset, vset]
arr <- which(pat - t(pat) == 1)
a.missing <- length(truearr)-length(which(match(truearr, arr)>0))
a.extra <- length(arr)-length(which(match(arr, truearr)>0))
a.total = length(truearr)
#########Structural Hamming distance#################
lcg <- lcg[vset, vset]
idx <- which(skeleton(truecg) - skeleton(lcg) != 0)
lcg[idx] <- skeleton(truecg)[idx]
shd <- length(idx) / 2
c <- abs(truecg-lcg)
shd <- shd + length(which(c+t(c) != 0)) / 2
###########Error measures###############
tp<-t.total-e.extra
N=choose(length(vset),2)-e.total
tn<-N-e.extra
tpr<-tp/e.total
tdr<-tp/t.total
fpr<-e.extra/N
acc<-(tp+tn)/(e.total+N)
#######################################
return(list(TPR = tpr,
TDR = tdr,
FPR = fpr,
ACC = acc,
a.total = a.total,
a.missing = a.missing,
a.extra = a.extra,
SHD = shd))
}
library(cglearn)
set.seed(100)
p.value <- .5
n <- 4000
is.chaingraph(toy.graph)
toy.graph <- toy.graph
tgdata <- rnorm.cg(n, toy.graph, get.normal.dist(toy.graph))
tgug <- naive.getug.norm(tgdata, p.value)
tg.jtree <- ug.to.jtree(tgug)
tg.pat <- learn.mec.norm(tg.jtree, cov(tgdata), n, p.value, "CG")
comp.skel(skeleton(toy.graph), skeleton(tg.pat))
# check comp.pat and compare the formulas for SHD
scores <- comp.cgs1(pattern(toy.graph), tg.pat)
# shd is correct here. use this code that is more reliable to compute needed metrics. This only has TP and SHD
comp.pat(pattern(toy.graph), tg.pat)
rLearnedScores <- data.frame(
name = character(),
pval = numeric(),
samplesize = integer(),
degree = integer(),
TPR = numeric(),
TDR = numeric(),
FPR = numeric(),
ACC = numeric(),
SHD = numeric()
)
print(scores)
curcgscores <- c('current', .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
rLearnedScores[nrow(rLearnedScores) + 1,] = c("current", .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
rLearnedScores[nrow(rLearnedScores) + 1,] = c("current", .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
print(rLearnedScores)
print(colnames(tgdata))
print(rownames(tgdata))
debugSource("~/pcgaussiantesting/CG-Testing/pc_gaussian_learning.R")
print(scores["TDR"])
print(scores["TPR"])
print(scores["FPR"])
print(scores["ACC"])
print(scores["SHD"])
debugSource("~/pcgaussiantesting/CG-Testing/pc_gaussian_learning.R")
print(scores["SHD"])
print(scores["ACC"])
print(scores["FPR"])
print(scores["TPR"])
print(scores["TDR"])
print(rLearnedScores)
print(rLearnedScores)
print(rLearnedScores)
print(rLearnedScores)
install.packages("C:/Users/hessor/Downloads/cglearn.tar.gz", repos = NULL, type = "source")
library(readr)
library(cglearn)
# data frame to add rows to
rLearnedScores <- data.frame(
name = character(),
pval = numeric(),
samplesize = integer(),
degree = integer(),
TPR = numeric(),
TDR = numeric(),
FPR = numeric(),
ACC = numeric(),
SHD = numeric()
)
for (i in 2:3) {
for (j in 1:30) {
for (p in c(.005, .05)) {
for (n in c(200, 2000)) {
# for degree i, set the correct file path for data
data_csv_file_path <- paste0("C:/Users/hessor/Documents/pcgaussiantesting/CG-Testing/cg_", i,"_50/cg50_", i,"_", j, "_data.csv")
# for degree i, set the correct file path for cg pattern
pattern_csv_file_path <- paste0("C:/Users/hessor/Documents/pcgaussiantesting/CG-Testing/cg_", i,"_50/cg50_", i,"_", j, "_pattern.csv")
# Read the data CSV file into a data frame
data_df <- read_csv(data_csv_file_path)
# Read the cg pattern CSV file into a data frame
pattern_df <- read_csv(pattern_csv_file_path)
# Convert the data frames to a matrix
tgdata <- as.matrix(data_df)
cgpat <- as.matrix(pattern_df)
# generate the undirected graph (independence graph)
tgug <- naive.getug.norm(tgdata, p)
# triangulate the ug and then create the junction tree
tg.jtree <- ug.to.jtree(tgug)
# get the pattern from the junction tree
tg.pat <- learn.mec.norm(tg.jtree, cov(tgdata), n, p, "CG")
# set the name of the cg
name <- paste0("cg50_", i,"_", j)
# change the cgs column names to match the data's column names, and insert rownames so it plays nice with tg.pat format
colnames(cgpat) <- as.character(1:50)
rownames(cgpat) <- as.character(1:50)
# get the metrics for the performance of the learned cg
scores <- comp.cgs(cgpat, tg.pat)
# add the metrics to the scores data frame
rLearnedScores[nrow(rLearnedScores) + 1,] = c(name, p, n, i, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
}
}
}
}
# after each cg has been learned and the metrics are calculated, save the results into a csv
write.csv(rLearnedScores,file="r_learned_cg_metrics.csv",row.names=FALSE)
getwd()
setwd("C:/Users/hessor/Documents/pcgaussiantesting/CG-Testing")
library(readr)
library(lcd)
writeResults <- function(adj, name){
# colnames(adj)<-rownames(adj)<-paste("v",1:50,sep = "")
write.csv(adj,file=name,row.names=FALSE)
}
#### For each CG, generate data with tgdata ####
# for all both 2 degrees and 3 degrees
for (i in 2:3) {
# for all 30 cgs with either 2 degree or 3 degree
for (j in 1:30) {
# for sample size 200 and 2000
for (z in c(200, 2000)) {
# for degree i and cg j, set the correct file path
csv_file_path <- paste0("C:/Users/hessor/Documents/pcgaussiantesting/CG-Testing/cg_", i,"_50/cg50_", i,"_", j, ".csv")
# Read the CSV file into a data frame
df <- read_csv(csv_file_path)
# Convert the data frame to a matrix
toy.graph <- as.matrix(df)
tgdata <- rnorm.cg(z, toy.graph, get.normal.dist(toy.graph))
# Declare name of file
name <- paste0("C:/Users/hessor/Documents/pcgaussiantesting/CG-Testing/cg_", i,"_50/cg50_", i,"_", j, "_data_", z,".csv")
# send info to write results
writeResults(tgdata, name)
}
}
}
library(readr)
library(cglearn)
# data frame to add rows to
rLearnedScores <- data.frame(
name = character(),
pval = numeric(),
samplesize = integer(),
degree = integer(),
TPR = numeric(),
TDR = numeric(),
FPR = numeric(),
ACC = numeric(),
SHD = numeric()
)
for (i in 2:3) {
for (j in 1:30) {
for (p in c(.005, .05)) {
for (n in c(200, 2000)) {
# for degree i, set the correct file path for data
data_csv_file_path <- paste0("C:/Users/hessor/Documents/pcgaussiantesting/CG-Testing/cg_", i,"_50/cg50_", i,"_", j, "_data_", n,".csv")
# for degree i, set the correct file path for cg pattern
pattern_csv_file_path <- paste0("C:/Users/hessor/Documents/pcgaussiantesting/CG-Testing/cg_", i,"_50/cg50_", i,"_", j, "_pattern.csv")
# Read the data CSV file into a data frame
data_df <- read_csv(data_csv_file_path)
# Read the cg pattern CSV file into a data frame
pattern_df <- read_csv(pattern_csv_file_path)
# Convert the data frames to a matrix
tgdata <- as.matrix(data_df)
cgpat <- as.matrix(pattern_df)
# generate the undirected graph (independence graph)
tgug <- naive.getug.norm(tgdata, p)
# triangulate the ug and then create the junction tree
tg.jtree <- ug.to.jtree(tgug)
# get the pattern from the junction tree
tg.pat <- learn.mec.norm(tg.jtree, cov(tgdata), n, p, "CG")
# set the name of the cg
name <- paste0("cg50_", i,"_", j)
# change the cgs column names to match the data's column names, and insert rownames so it plays nice with tg.pat format
colnames(cgpat) <- as.character(1:50)
rownames(cgpat) <- as.character(1:50)
# get the metrics for the performance of the learned cg
scores <- comp.cgs(cgpat, tg.pat)
# add the metrics to the scores data frame
rLearnedScores[nrow(rLearnedScores) + 1,] = c(name, p, n, i, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
}
}
}
}
# after each cg has been learned and the metrics are calculated, save the results into a csv
write.csv(rLearnedScores,file="r_lcd_learned_cg_metrics.csv",row.names=FALSE)
library(cglearn)
set.seed(100)
p.value <- .5
n <- 4000
is.chaingraph(toy.graph)
toy.graph <- toy.graph
tgdata <- rnorm.cg(n, toy.graph, get.normal.dist(toy.graph))
tgug <- naive.getug.norm(tgdata, p.value)
tg.jtree <- ug.to.jtree(tgug)
tg.pat <- learn.mec.norm(tg.jtree, cov(tgdata), n, p.value, "CG")
comp.skel(skeleton(toy.graph), skeleton(tg.pat))
library(cglearn)
set.seed(100)
p.value <- .5
n <- 4000
is.chaingraph(toy.graph)
toy.graph <- toy.graph
tgdata <- rnorm.cg(n, toy.graph, get.normal.dist(toy.graph))
tgug <- naive.getug.norm(tgdata, p.value)
tg.jtree <- ug.to.jtree(tgug)
tg.pat <- learn.mec.norm(tg.jtree, cov(tgdata), n, p.value, "CG")
comp.skel(skeleton(toy.graph), skeleton(tg.pat))
# check comp.pat and compare the formulas for SHD
scores <- comp.cgs(pattern(toy.graph), tg.pat)
# shd is correct here. use this code that is more reliable to compute needed metrics. This only has TP and SHD
comp.pat(pattern(toy.graph), tg.pat)
rLearnedScores <- data.frame(
name = character(),
pval = numeric(),
samplesize = integer(),
degree = integer(),
TPR = numeric(),
TDR = numeric(),
FPR = numeric(),
ACC = numeric(),
SHD = numeric()
)
print(scores)
curcgscores <- c('current', .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
rLearnedScores[nrow(rLearnedScores) + 1,] = c("current", .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
rLearnedScores[nrow(rLearnedScores) + 1,] = c("current", .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
colnames(rLearnedScores) <- c("name", "pval", "samplesize", "degree", "TPR", "TDR", "FPR", "ACC", "SHD")
print(rLearnedScores)
print(colnames(tgdata))
print(rownames(tgdata))
library(cglearn)
set.seed(100)
p.value <- .5
n <- 4000
is.chaingraph(toy.graph)
toy.graph <- toy.graph
tgdata <- rnorm.cg(n, toy.graph, get.normal.dist(toy.graph))
tgug <- naive.getug.norm(tgdata, p.value)
tg.jtree <- ug.to.jtree(tgug)
tg.pat <- learn.mec.norm(tg.jtree, cov(tgdata), n, p.value, "CG")
comp.skel(skeleton(toy.graph), skeleton(tg.pat))
# check comp.pat and compare the formulas for SHD
scores <- comp.cgs(pattern(toy.graph), tg.pat)
# shd is correct here. use this code that is more reliable to compute needed metrics. This only has TP and SHD
comp.pat(pattern(toy.graph), tg.pat)
rLearnedScores <- data.frame(
name = character(),
pval = numeric(),
samplesize = integer(),
degree = integer(),
TPR = numeric(),
TDR = numeric(),
FPR = numeric(),
ACC = numeric(),
SHD = numeric()
)
print(scores)
curcgscores <- c('current', .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
rLearnedScores[nrow(rLearnedScores) + 1,] = c("current", .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
rLearnedScores[nrow(rLearnedScores) + 1,] = c("current", .05, 200, 2, scores['TPR'], scores['TDR'], scores['FPR'],scores['ACC'], scores['SHD'])
print(colnames(rLearnedScores))
colnames(rLearnedScores) <- c("name", "pval", "samplesize", "degree", "TPR", "TDR", "FPR", "ACC", "SHD")
print(rLearnedScores)
print(colnames(rLearnedScores))
debugSource("~/pcgaussiantesting/CG-Testing/pc_learning.R")
install.packages("pcalg")
debugSource("~/pcgaussiantesting/CG-Testing/pc_learning.R")
BiocManager::install("RBGL")
debugSource("~/pcgaussiantesting/CG-Testing/pc_learning.R")
install.packages("pcalg")
debugSource("~/pcgaussiantesting/CG-Testing/pc_learning.R")
version(pcalg)
sessionInfo()
remove.packages(“pcalg”)
remove.packages()
remove.packages("pcalg")
install.packages("C:/Users/hessor/Downloads/pcalg_1.1-6.tar.gz", repos = NULL, type = "source")
remove.packages("RBGL")
library(pcalg)
R CMD INSTALL --no-lock
install.packages("C:/Users/hessor/Downloads/pcalg_1.1-6.tar.gz", repos = NULL, type = "source")
BiocManager::install("RBGL")
